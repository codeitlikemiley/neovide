{
  "unwrap_or_else": {
    "prefix": "unwrap_or_else",
    "body": [
      "let ${1:value} = ${2:method_name}(${3:params}).unwrap_or_else(|e| {",
      "    eprintln!(\"An error occurred: {}\", e);",
      "    ${4:default_struct}",
      "});"
    ],
    "description": "Unwrap a Result or handle the error and provide a default value"
  },
  "Try Borrow Mut on Struct Method": {
    "prefix": "tbm",
    "body": [
      "if let Ok(mut ${1:field}) = self.${1:field}.try_borrow_mut() {",
      "\t*${1:field} = ${2:newVal};",
      "} else {",
      "\tprintln!(\"Handle Error\");",
      "}"
    ],
    "description": "Mutable borrow check"
  },
  "impl_ord_single_field": {
    "prefix": "impl_ord",
    "body": [
      "impl Ord for ${1:YourType} {",
      "    fn cmp(&self, other: &Self) -> std::cmp::Ordering {",
      "        self.${2:field1}.cmp(&other.${2:field1})",
      "    }",
      "}"
    ],
    "description": "Implement the Ord trait for a type with a single field in Rust"
  },
  "deserialize_json_string": {
    "prefix": "deserialize_json",
    "body": [
      "let json_data = \"${1:json_string}\";",
      "let deserialized: ${2:YourType} = serde_json::from_str(json_data).unwrap();"
    ],
    "description": "Deserialize a JSON string into a Rust type using serde_json::from_str"
  },
  "impl_partialeq_single_field": {
    "prefix": "impl_partialeq",
    "body": [
      "impl PartialEq for ${1:YourType} {",
      "    fn eq(&self, other: &Self) -> bool {",
      "        self.${2:field1} == other.${2:field1}",
      "    }",
      "}"
    ],
    "description": "Implement the PartialEq trait for a type with a single field in Rust"
  },
  "impl_iter_range": {
    "prefix": "impl_iter_range",
    "body": [
      "struct ${1:YourRangeIterator} {",
      "    current: ${2:ItemType},",
      "    end: ${2:ItemType},",
      "}",
      "",
      "impl Iterator for ${1:YourRangeIterator} {",
      "    type Item = ${2:ItemType};",
      "",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if self.current < self.end {",
      "            self.current += 1;",
      "            Some(self.current)",
      "        } else {",
      "            None",
      "        }",
      "    }",
      "}"
    ],
    "description": "Implement the Iterator trait for a basic range iterator in Rust"
  },
  "create_fxhasher": {
    "prefix": "create_fxhasher",
    "body": [
      "use rustc_hash::FxHasher;",
      "let mut hasher = FxHasher::default();"
    ],
    "description": "Create an instance of FxHasher from the rustc-hash crate in Rust"
  },
  "impl_iterator": {
    "prefix": "impl_iter",
    "body": [
      "impl Iterator for ${1:YourType} {",
      "    type Item = ${2:ItemType};",
      "",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        match self.items.len() {",
      "            n if n > 0 => Some(self.items.remove(0)),",
      "            _ => None,",
      "        }",
      "    }",
      "}"
    ],
    "description": "Implement the Iterator trait for a custom type in Rust"
  },
  "is_normal": {
    "prefix": "is_normal",
    "body": [
      "fn is_normal<T: Sized + Send + Sync + Unpin>() {}"
    ],
    "description": "Check if the Struct can be safely sent across threads"
  },
  "serialize_to_json_string": {
    "prefix": "serialize_json",
    "body": [
      "let serialized = serde_json::to_string(&${1:your_instance}).unwrap();"
    ],
    "description": "Serialize a Rust type into a JSON string using serde_json::to_string"
  },
  "profile_release": {
    "prefix": "profile_release",
    "body": [
      "[profile.release]\ncodegenâ€“units = 1\nstrip = true\nlto = true\nopt-level = \"z\"\n"
    ],
    "description": "Reduced Binary Size"
  },
  "impl_debug_single_field": {
    "prefix": "impl_debug",
    "body": [
      "use std::fmt;",
      "",
      "impl fmt::Debug for ${1:YourType} {",
      "    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {",
      "        write!(f, \"${1:YourType} {{ ${2:field1}: {:?} }}\", self.${2:field1})",
      "    }",
      "}"
    ],
    "description": "Implement the Debug trait for a type with a single field in Rust"
  },
  "impl_sub_trait": {
    "prefix": "impl_sub",
    "body": [
      "use std::ops::Sub;",
      "",
      "impl Sub for ${1:YourType} {",
      "    type Output = ${1:YourType};",
      "",
      "    fn sub(self, other: ${1:YourType}) -> Self::Output {",
      "        // Your logic here",
      "    }",
      "}"
    ],
    "description": "Implement the std::ops::Sub trait for a custom type in Rust"
  },
  "impl_add_trait": {
    "prefix": "impl_add",
    "body": [
      "use std::ops::Add;",
      "",
      "impl Add for ${1:YourType} {",
      "    type Output = ${1:YourType};",
      "",
      "    fn add(self, other: ${1:YourType}) -> Self::Output {",
      "        // Your logic here",
      "        // return ${1:YourType} { field: self.field + other.field };",
      "    }",
      "}"
    ],
    "description": "Implement the std::ops::Add trait for a custom type in Rust"
  },
  "ImplFromTraitForErrorConversion": {
    "prefix": "impl_from",
    "body": [
      "impl From<${1:T}> for ${2:StructOrEnum} {",
      "    fn from(${3:value}: $1) -> Self {",
      "        $3.into()",
      "    }",
      "}"
    ],
    "description": "Implement the From trait for error conversion"
  },
  "impl_deref": {
    "prefix": "impl_deref",
    "body": [
      "use std::ops::{Deref, DerefMut};",
      "",
      "impl<${1:T}> Deref for ${2:YourConcreteStruct}<${1:T}> {",
      "    type Target = ${1:T};",
      "    fn deref(&self) -> &Self::Target {",
      "        &self.${3:your_field}",
      "    }",
      "}",
      "",
      "impl<${1:T}> DerefMut for ${2:YourConcreteStruct}<${1:T}> {",
      "    fn deref_mut(&mut self) -> &mut Self::Target {",
      "        &mut self.${3:your_field}",
      "    }",
      "}"
    ],
    "description": "Impl Deref and DerefMut traits for a custom type"
  },
  "rust_script": {
    "prefix": "rsz",
    "body": [
      "#!/usr/bin/env -S cargo +nightly -q -Zscript",
      "",
      "fn main() {",
      "    ${1:println!(\"Do Something\");}",
      "}"
    ],
    "description": "Rust Script Template"
  },
  "impl_div_trait": {
    "prefix": "impl_div",
    "body": [
      "use std::ops::Div;",
      "",
      "impl Div for ${1:YourType} {",
      "    type Output = ${1:YourType};",
      "",
      "    fn div(self, other: ${1:YourType}) -> Self::Output {",
      "        // Your logic here",
      "    }",
      "}"
    ],
    "description": "Implement the std::ops::Div trait for a custom type in Rust"
  },
  "Impl Error": {
    "prefix": "impl_error",
    "body": [
      "impl Error for ${1:StructOrEnum} {",
      "    fn source(&self) -> Option<&(dyn Error + 'static)> {",
      "        self.source.as_deref()",
      "    }",
      "}"
    ],
    "description": "Implement Error trait for MonthError"
  },
  "Read File Line-by-Line": {
    "prefix": "read_file_lines",
    "body": [
      "use std::{",
      "    error::Error,",
      "    fs::File,",
      "    io::{BufRead, BufReader, Error as IOError},",
      "};",
      "",
      "fn read_file(filename: &str) -> Result<(), IOError> {",
      "    let file = File::open(filename)?;",
      "    let reader = BufReader::new(file);",
      "",
      "    for (index, line) in reader.lines().enumerate() {",
      "        match line {",
      "            Ok(content) => println!(\"Line {}: {}\", index + 1, content),",
      "            Err(_) => println!(\"Line {}:\", index + 1),",
      "        }",
      "    }",
      "    Ok(())",
      "}"
    ],
    "description": "Snippet for the read_file function to read a file line-by-line in Rust with specified imports and function."
  },
  "match_ordering": {
    "prefix": "match_ordering",
    "body": [
      "match ${1:num1}.cmp(&${2:num2}) {",
      "    std::cmp::Ordering::Greater => println!(\"{} > {}\", ${1:num1}, ${2:num2}),",
      "    std::cmp::Ordering::Less => println!(\"{} < {}\", ${1:num1}, ${2:num2}),",
      "    std::cmp::Ordering::Equal => println!(\"{} == {}\", ${1:num1}, ${2:num2}),",
      "}"
    ],
    "description": "Complete match statement to compare two numbers using all variants of std::cmp::Ordering in Rust"
  },
  "Implement IntoIterator": {
    "prefix": "impl_into_iter",
    "body": [
      "impl IntoIterator for ${1:Struct} {",
      "    type Item = ${2:String};",
      "    type IntoIter = ${3:std::vec::IntoIter<Self::Item>};",
      "    ",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        vec![",
      "            ${4}",
      "        ].into_iter()",
      "    }",
      "}"
    ],
    "description": "Implements the IntoIterator trait for a struct with lifetimes"
  },
  "rust_script_crates": {
    "prefix": "rust_script_crates",
    "body": [
      "#!/usr/bin/env -S cargo +nightly -Zscript\n```cargo\n[dependencies]\n\n```"
    ],
    "description": "add cargo dependencies on single file rust script"
  },
  "impl_display_single_field": {
    "prefix": "impl_display",
    "body": [
      "use std::fmt;",
      "",
      "impl fmt::Display for ${1:YourType} {",
      "    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {",
      "        write!(f, \"Value: {}\", self.${2:field1})",
      "    }",
      "}"
    ],
    "description": "Implement the Display trait for a type with a single field in Rust"
  },
  "impl_partialord_single_field": {
    "prefix": "impl_partialord",
    "body": [
      "impl PartialOrd for ${1:YourType} {",
      "    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {",
      "        self.${2:field1}.partial_cmp(&other.${2:field1})",
      "    }",
      "}"
    ],
    "description": "Implement the PartialOrd trait for a type with a single field in Rust"
  },
  "impl_mul_trait": {
    "prefix": "impl_mul",
    "body": [
      "use std::ops::Mul;",
      "",
      "impl Mul for ${1:YourType} {",
      "    type Output = ${1:YourType};",
      "",
      "    fn mul(self, other: ${1:YourType}) -> Self::Output {",
      "        // Your logic here",
      "    }",
      "}"
    ],
    "description": "Implement the std::ops::Mul trait for a custom type in Rust"
  },
  "create_default_hasher": {
    "prefix": "create_default_hasher",
    "body": [
      "let mut hasher = std::collections::hash_map::DefaultHasher::new();"
    ],
    "description": "Create an instance of DefaultHasher in Rust"
  },
  "import_serde_traits": {
    "prefix": "import_serde",
    "body": [
      "use serde::{Serialize, Deserialize};"
    ],
    "description": "Import the Serialize and Deserialize traits from the serde crate in Rust"
  },
  "fuzzy-match-string": {
    "prefix": "fuzzy_string",
    "body": [
      "fn is_fuzzy_match(text: &str, pattern: &str) -> bool {\n    let mut pattern_chars = pattern.chars().peekable();\n    for ch in text.chars() {\n        if let Some(&next_pattern_char) = pattern_chars.peek() {\n            if ch == next_pattern_char {\n                pattern_chars.next();\n            }\n        }\n    }\n    pattern_chars.peek().is_none()\n}"
    ],
    "description": "A function for Fuzzy Matching Strings"
  },
  "Iced Font Import": {
    "prefix": "iced_font",
    "body": [
      "use iced::{",
      "    font::{Family, Stretch, Weight},",
      "    Font,",
      "};"
    ],
    "description": "Import statements for Iced font"
  },
  "Rust struct with common derived traits": {
    "prefix": "struct_json",
    "body": [
      "#[derive(Serialize, Deserialize, Clone, Debug)]",
      "pub struct ${1:StructName} {",
      "    ${2:field_name}: ${3:field_type},",
      "}"
    ],
    "description": "Create a Rust struct with Serialize, Deserialize, Clone, and Debug traits"
  },
  "impl_clone_single_field": {
    "prefix": "impl_clone",
    "body": [
      "impl Clone for ${1:YourType} {",
      "    fn clone(&self) -> Self {",
      "        Self { ${2:field1}: self.${2:field1} }",
      "    }",
      "}"
    ],
    "description": "Implement Clone trait if we have more custom way of cloning a struct"
  },
  "Rust cfg test": {
    "prefix": "cfg_test",
    "body": [
      "#[cfg(test)]",
      "mod tests {",
      "    use super::*;",
      "",
      "    #[test]",
      "    fn test_${1:test_name}() {",
      "        assert!($2);",
      "    }",
      "}"
    ],
    "description": "Create a Rust test module with configurable test name"
  },
  "Iced Imports": {
    "prefix": "iced_widgets",
    "body": [
      "use iced::widget::{",
      "    button, canvas, checkbox, column, combo_box, container,",
      "    horizontal_rule, horizontal_space, image, pick_list,",
      "    progress_bar, radio, row, scrollable, slider, svg,",
      "    text, text_input, toggler, tooltip, vertical_rule,",
      "    vertical_slider,",
      "};"
    ],
    "description": "Snippet for Iced framework widget imports in Rust"
  },
  "impl_vec_iterator": {
    "prefix": "impl_vec_iterator",
    "body": [
      "pub struct VecIterator<'a, T> {",
      "    vec: &'a [T],",
      "    index: usize,",
      "}",
      "",
      "impl<'a, T> Iterator for VecIterator<'a, T> {",
      "    type Item = &'a T;",
      "",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if self.index < self.vec.len() {",
      "            let item = &self.vec[self.index];",
      "            self.index += 1;",
      "            Some(item)",
      "        } else {",
      "            None",
      "        }",
      "    }",
      "}"
    ],
    "description": "Implement a basic vector iterator in Rust"
  }
}